{"ast":null,"code":"import React from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GradeAnalysis=_ref=>{let{data}=_ref;if(!data||data.length===0){return/*#__PURE__*/_jsx(\"div\",{children:\"No data available for Grade Analysis.\"});}// Group data by grade and calculate averages\nconst grades={};data.forEach(row=>{const grade=row[\"Grade\"];const time=parseFloat(row[\"Average Lesson Time-on-Task per Student (Mins)\"])||0;const passRate=parseFloat(row[\"Average % Lessons Passed (YTD)\"])||0;if(!grades[grade]){grades[grade]={totalTime:0,totalPassRate:0,count:0};}grades[grade].totalTime+=time;grades[grade].totalPassRate+=passRate;grades[grade].count+=1;});const gradeData=Object.entries(grades).map(_ref2=>{let[grade,stats]=_ref2;return{grade,avgTime:(stats.totalTime/stats.count).toFixed(2),avgPassRate:(stats.totalPassRate/stats.count).toFixed(2)};});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Grade Analysis\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Grade\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Average Time-on-Task (mins)\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Average % Pass Rate\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:gradeData.map(row=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:row.grade}),/*#__PURE__*/_jsx(\"td\",{children:row.avgTime}),/*#__PURE__*/_jsxs(\"td\",{children:[row.avgPassRate,\"%\"]})]},row.grade))})]})]});};export default GradeAnalysis;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","GradeAnalysis","_ref","data","length","children","grades","forEach","row","grade","time","parseFloat","passRate","totalTime","totalPassRate","count","gradeData","Object","entries","map","_ref2","stats","avgTime","toFixed","avgPassRate"],"sources":["/Users/bmcmanus/DDE-Math-Analysis/src/components/GradeAnalysis.jsx"],"sourcesContent":["import React from \"react\";\n\nconst GradeAnalysis = ({ data }) => {\n  if (!data || data.length === 0) {\n    return <div>No data available for Grade Analysis.</div>;\n  }\n\n  // Group data by grade and calculate averages\n  const grades = {};\n  data.forEach((row) => {\n    const grade = row[\"Grade\"];\n    const time = parseFloat(row[\"Average Lesson Time-on-Task per Student (Mins)\"]) || 0;\n    const passRate = parseFloat(row[\"Average % Lessons Passed (YTD)\"]) || 0;\n\n    if (!grades[grade]) {\n      grades[grade] = { totalTime: 0, totalPassRate: 0, count: 0 };\n    }\n\n    grades[grade].totalTime += time;\n    grades[grade].totalPassRate += passRate;\n    grades[grade].count += 1;\n  });\n\n  const gradeData = Object.entries(grades).map(([grade, stats]) => ({\n    grade,\n    avgTime: (stats.totalTime / stats.count).toFixed(2),\n    avgPassRate: (stats.totalPassRate / stats.count).toFixed(2),\n  }));\n\n  return (\n    <div>\n      <h2>Grade Analysis</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Grade</th>\n            <th>Average Time-on-Task (mins)</th>\n            <th>Average % Pass Rate</th>\n          </tr>\n        </thead>\n        <tbody>\n          {gradeData.map((row) => (\n            <tr key={row.grade}>\n              <td>{row.grade}</td>\n              <td>{row.avgTime}</td>\n              <td>{row.avgPassRate}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default GradeAnalysis;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,aAAa,CAAGC,IAAA,EAAc,IAAb,CAAEC,IAAK,CAAC,CAAAD,IAAA,CAC7B,GAAI,CAACC,IAAI,EAAIA,IAAI,CAACC,MAAM,GAAK,CAAC,CAAE,CAC9B,mBAAON,IAAA,QAAAO,QAAA,CAAK,uCAAqC,CAAK,CAAC,CACzD,CAEA;AACA,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CACjBH,IAAI,CAACI,OAAO,CAAEC,GAAG,EAAK,CACpB,KAAM,CAAAC,KAAK,CAAGD,GAAG,CAAC,OAAO,CAAC,CAC1B,KAAM,CAAAE,IAAI,CAAGC,UAAU,CAACH,GAAG,CAAC,gDAAgD,CAAC,CAAC,EAAI,CAAC,CACnF,KAAM,CAAAI,QAAQ,CAAGD,UAAU,CAACH,GAAG,CAAC,gCAAgC,CAAC,CAAC,EAAI,CAAC,CAEvE,GAAI,CAACF,MAAM,CAACG,KAAK,CAAC,CAAE,CAClBH,MAAM,CAACG,KAAK,CAAC,CAAG,CAAEI,SAAS,CAAE,CAAC,CAAEC,aAAa,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAE,CAAC,CAC9D,CAEAT,MAAM,CAACG,KAAK,CAAC,CAACI,SAAS,EAAIH,IAAI,CAC/BJ,MAAM,CAACG,KAAK,CAAC,CAACK,aAAa,EAAIF,QAAQ,CACvCN,MAAM,CAACG,KAAK,CAAC,CAACM,KAAK,EAAI,CAAC,CAC1B,CAAC,CAAC,CAEF,KAAM,CAAAC,SAAS,CAAGC,MAAM,CAACC,OAAO,CAACZ,MAAM,CAAC,CAACa,GAAG,CAACC,KAAA,MAAC,CAACX,KAAK,CAAEY,KAAK,CAAC,CAAAD,KAAA,OAAM,CAChEX,KAAK,CACLa,OAAO,CAAE,CAACD,KAAK,CAACR,SAAS,CAAGQ,KAAK,CAACN,KAAK,EAAEQ,OAAO,CAAC,CAAC,CAAC,CACnDC,WAAW,CAAE,CAACH,KAAK,CAACP,aAAa,CAAGO,KAAK,CAACN,KAAK,EAAEQ,OAAO,CAAC,CAAC,CAC5D,CAAC,EAAC,CAAC,CAEH,mBACEvB,KAAA,QAAAK,QAAA,eACEP,IAAA,OAAAO,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBL,KAAA,UAAAK,QAAA,eACEP,IAAA,UAAAO,QAAA,cACEL,KAAA,OAAAK,QAAA,eACEP,IAAA,OAAAO,QAAA,CAAI,OAAK,CAAI,CAAC,cACdP,IAAA,OAAAO,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCP,IAAA,OAAAO,QAAA,CAAI,qBAAmB,CAAI,CAAC,EAC1B,CAAC,CACA,CAAC,cACRP,IAAA,UAAAO,QAAA,CACGW,SAAS,CAACG,GAAG,CAAEX,GAAG,eACjBR,KAAA,OAAAK,QAAA,eACEP,IAAA,OAAAO,QAAA,CAAKG,GAAG,CAACC,KAAK,CAAK,CAAC,cACpBX,IAAA,OAAAO,QAAA,CAAKG,GAAG,CAACc,OAAO,CAAK,CAAC,cACtBtB,KAAA,OAAAK,QAAA,EAAKG,GAAG,CAACgB,WAAW,CAAC,GAAC,EAAI,CAAC,GAHpBhB,GAAG,CAACC,KAIT,CACL,CAAC,CACG,CAAC,EACH,CAAC,EACL,CAAC,CAEV,CAAC,CAED,cAAe,CAAAR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}